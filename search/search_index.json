{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"haiku-trainer","text":"<p><code>haiku-trainer</code> is an experimental package to facilitate fast, extensible, and scalable deep learning in <code>dm-haiku</code> and <code>JAX</code>.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install haiku_trainer\n</code></pre>"},{"location":"00_trainer/","title":"Trainer","text":"<p>source</p>"},{"location":"00_trainer/#trainstate","title":"TrainState","text":"<pre><code> TrainState (epoch:ForwardRef('int'), step:ForwardRef('int'),\n             params:ForwardRef('hk.Params'), state:ForwardRef('hk.State'),\n             opt_state:ForwardRef('optax.OptState'),\n             next_key:ForwardRef('jrand.PRNGKey'),\n             logs:ForwardRef('dict')=None)\n</code></pre> <p>source</p>"},{"location":"00_trainer/#trainer_1","title":"Trainer","text":"<pre><code> Trainer\n          (transformed:hk.TransformedWithState|hk.MultiTransformedWithStat\n          e, optimizers:optax.GradientTransformation|Sequence[optax.Gradie\n          ntTransformation], rng_key:jrand.PRNGKey=None,\n          callbacks:Sequence[Callback]=None, step_fn:StepFn=None,\n          lr:float=0.001, n_epochs:int=1, _train_state:TrainState=None)\n</code></pre>"},{"location":"00_trainer/#step-functions","title":"Step Functions","text":"<p>source</p>"},{"location":"00_trainer/#stepfn","title":"StepFn","text":"<pre><code> StepFn (trainer:Trainer=None, *args, **kwargs)\n</code></pre> <p>Initialize self. See help(type(self)) for accurate signature.</p> <p>source</p>"},{"location":"00_trainer/#defaultstepfn","title":"DefaultStepFn","text":"<pre><code> DefaultStepFn (trainer:Trainer=None, *args, **kwargs)\n</code></pre> <p>Initialize self. See help(type(self)) for accurate signature.</p>"},{"location":"00_trainer/#test","title":"Test","text":""},{"location":"00_trainer/#fake-module","title":"Fake Module","text":"<pre><code>class LinearBatchNorm(hk.Module):\n    \"Linear layer with batch normalization\"\n    def __init__(self, output_size, name=None):\n        super().__init__(name=name)\n        self.output_size = output_size\n\n    def __call__(self, x, training=False):\n        return hk.BatchNorm(True, True, 0.9)(hk.Linear(self.output_size)(x), is_training=training)\n</code></pre> <pre><code>def make_hk_module(\n    module: hk.Module, # haiku module \n    *args, # haiku module arguments\n    **kargs, # haiku module arguments\n) -&gt; hk.Transformed:\n\n    def model_fn(x, is_training: bool = True):\n        return module(*args, **kargs)(x, is_training)\n\n    return hk.transform_with_state(model_fn)\n\nmodule = make_hk_module(LinearBatchNorm, 2)\n</code></pre>"},{"location":"00_trainer/#fake-data","title":"Fake Data","text":"<pre><code>from jax_dataloader import DataLoader, ArrayDataset\nfrom sklearn.datasets import make_classification\n</code></pre> <pre><code>xs, ys = make_classification(n_samples=2000, n_features=10, random_state=0)\nds = ArrayDataset(xs, ys)\ndl = DataLoader(ds, 'jax', batch_size=128)\n</code></pre>"},{"location":"00_trainer/#training","title":"Training","text":"<pre><code>trainer = Trainer(\n    transformed=module,\n    optimizers=optax.adam(1e-3),\n    callbacks=[],\n)\n</code></pre> <pre><code>trainer.fit(dl)\n</code></pre> <pre><code>/home/birk/miniconda3/envs/jax-dataloader/lib/python3.8/site-packages/haiku/_src/base.py:515: UserWarning: Explicitly requested dtype float64 requested in zeros is not available, and will be truncated to dtype float32. To enable more dtypes, set the jax_enable_x64 configuration option or the JAX_ENABLE_X64 shell environment variable. See https://github.com/google/jax#current-gotchas for more.\n  param = init(shape, dtype)\n</code></pre>"},{"location":"01_callbacks/","title":"Callbacks","text":"<p>source</p>"},{"location":"01_callbacks/#callback","title":"Callback","text":"<pre><code> Callback ()\n</code></pre> <p>Initialize self. See help(type(self)) for accurate signature.</p> <p>source</p>"},{"location":"01_callbacks/#callbacklist","title":"CallbackList","text":"<pre><code> CallbackList (callbacks:List[Callback]=None, add_history:bool=True,\n               add_progbar:bool=True, trainer:Trainer=None, **kwargs)\n</code></pre> <p>Initialize self. See help(type(self)) for accurate signature.</p> <pre><code>class ProgbarLogger(Callback):\n    def __init__(self): pass\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>haiku-trainer</li> <li>API<ul> <li>Trainer</li> <li>Callbacks</li> </ul> </li> </ul>"},{"location":"changelog_not_found/","title":"Changelog not found","text":""},{"location":"changelog_not_found/#changelogmd-file-not-found","title":"CHANGELOG.md file not found.","text":"<p>To generate the changelog file, please run the following command from the project root directory. </p> <pre><code>nbdev_changelog\n</code></pre> <p>If you do not want this page to be rendered as part of the documentation, please remove the following line from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- [Releases]{changelog}\n</code></pre>"},{"location":"cli_commands_not_found/","title":"No CLI commands found in console_scripts in settings.ini file.","text":"<p>For documenting CLI commands, please add command line executables in <code>console_scripts</code> in <code>settings.ini</code> file. </p> <p>If you do not want this page to be rendered as part of the documentation, please remove the following lines from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- CLI\n{cli}\n</code></pre>"},{"location":"api/haiku_trainer/base/TrainState/","title":"TrainState","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState","title":"<code>haiku_trainer.base.TrainState</code>","text":"<p>         Bases: <code>NamedTuple</code></p> Source code in <code>haiku_trainer/base.py</code> <pre><code>class TrainState(NamedTuple):\n    epoch: int\n    step: int\n    params: hk.Params\n    state: hk.State\n    opt_state: optax.OptState\n    next_key: jrand.PRNGKey\n    logs: dict = None\n</code></pre>"},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState-attributes","title":"Attributes","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.epoch","title":"<code>epoch: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.logs","title":"<code>logs: dict = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.next_key","title":"<code>next_key: jrand.PRNGKey</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.opt_state","title":"<code>opt_state: optax.OptState</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.params","title":"<code>params: hk.Params</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.state","title":"<code>state: hk.State</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/base/TrainState/#haiku_trainer.base.TrainState.step","title":"<code>step: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/","title":"TrainState","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState","title":"<code>haiku_trainer.trainer.TrainState</code>","text":"<p>         Bases: <code>NamedTuple</code></p> Source code in <code>haiku_trainer/trainer.py</code> <pre><code>class TrainState(NamedTuple):\n    epoch: int\n    step: int\n    params: hk.Params\n    state: hk.State\n    opt_state: optax.OptState\n    next_key: jrand.PRNGKey\n    logs: dict = None\n\n    def __eq__(self, compare: TrainState) -&gt; bool:\n        return (self.epoch == compare.epoch) and (self.step == compare.step)\n</code></pre>"},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState-attributes","title":"Attributes","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.epoch","title":"<code>epoch: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.logs","title":"<code>logs: dict = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.next_key","title":"<code>next_key: jrand.PRNGKey</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.opt_state","title":"<code>opt_state: optax.OptState</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.params","title":"<code>params: hk.Params</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.state","title":"<code>state: hk.State</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.step","title":"<code>step: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState-functions","title":"Functions","text":""},{"location":"api/haiku_trainer/trainer/TrainState/#haiku_trainer.trainer.TrainState.__eq__","title":"<code>__eq__(compare: TrainState) -&gt; bool</code>","text":"Source code in <code>haiku_trainer/trainer.py</code> <pre><code>def __eq__(self, compare: TrainState) -&gt; bool:\n    return (self.epoch == compare.epoch) and (self.step == compare.step)\n</code></pre>"},{"location":"api/haiku_trainer/trainer/Trainer/","title":"Trainer","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer","title":"<code>haiku_trainer.trainer.Trainer</code>  <code>dataclass</code>","text":"Source code in <code>haiku_trainer/trainer.py</code> <pre><code>@dataclass\nclass Trainer:\n    transformed: hk.TransformedWithState | hk.MultiTransformedWithState\n    optimizers: optax.GradientTransformation | Sequence[optax.GradientTransformation]\n    rng_key: jrand.PRNGKey = None\n\n    # callback functions\n    callbacks: Sequence[Callback] = None\n    step_fn: StepFn = None\n\n    # trainer configs\n    lr: float = 1e-3\n    n_epochs: int = 1\n\n    # model train state\n    _train_state: TrainState = None\n\n    @property\n    def train_state(self):\n        return self._train_state\n\n    def _initialize_key(self):\n        if self.rng_key is None:    return jrand.PRNGKey(42) # TODO: use global\n        else:                       return self.rng_key\n\n    def _initialize_callbacks(self):\n        if self.callbacks is None:\n            self.callbacks = CallbackList()\n        elif isinstance(self.callbacks, CallbackList):\n            self.callbacks = self.callbacks\n        elif isinstance(self.callbacks, Sequence):\n            self.callbacks = CallbackList(self.callbacks)\n        else:\n            raise ValueError(f\"Invalid callbacks. Expected `CallbackList` or `Sequence[Callback]`.\")\n\n        self.callbacks.init_trainer(self)\n\n    def _initialize_step_fn(self):\n        if self.step_fn is None:\n            self.step_fn = DefaultStepFn(trainer=self)\n        else:\n            if isinstance(self.step_fn, StepFn):\n                self.step_fn.init_trainer(self)\n            else:\n                raise ValueError(f\"Invalid `Trainer.step_fn`. Expected `StepFn`, but got `{type(self.step_fn)}`.\")\n\n    def _initialize(self):\n        self._initialize_callbacks()\n        self._initialize_step_fn()\n\n    def _run_callbacks(self, hook_name: str):\n        hook_fn = getattr(self.callbacks, hook_name, None)\n        if hook_fn is not None:\n            hook_fn(self.train_state)\n\n    def _run_step_fn(self, step_name: str, batch: Tuple[jax.Array, ...], validate: bool = False):\n        step_fn = getattr(self.step_fn, step_name)\n        train_state = step_fn(self.train_state, batch)\n\n        if validate and train_state == self.train_state:\n            raise ValueError(f\"Train state is not updated after `{step_name}`.\")\n        self.update_train_state(train_state)\n\n    def update_train_state(self, train_state: TrainState = None, **kwargs):\n        if train_state is None and kwargs == {}:\n            raise ValueError(\"Either `train_state` or `kwargs` must be provided.\")\n        if train_state is None:\n            train_state = self.train_state._replace(**kwargs)\n        self._train_state = train_state\n\n    def fit(self, train_dataloader, val_dataloader=None):\n        self._initialize()\n        self._run_callbacks(\"on_train_begin\")\n        for epoch in range(self.n_epochs):\n            self._run_callbacks(\"on_epoch_begin\")\n            for batch in train_dataloader:\n                self._run_callbacks(\"on_train_batch_begin\")\n                if self.train_state is None:\n                    self._run_step_fn(\"init_step\", batch)\n                self._run_step_fn(\"train_step\", batch)\n                self._run_callbacks(\"on_train_batch_end\")\n            self._run_callbacks(\"on_epoch_end\")\n\n            if val_dataloader is not None:\n                self._run_callbacks(\"on_val_begin\")\n                for batch in val_dataloader:\n                    self._run_callbacks(\"on_val_batch_begin\")\n                    self._run_step_fn(\"val_step\", batch)\n                    self._run_callbacks(\"on_val_batch_end\")\n                self._run_callbacks(\"on_val_end\")\n\n            self._run_callbacks(\"on_train_end\")\n            self._run_step_fn(\"epoch_step\", batch=None)\n\n        self._run_callbacks(\"on_train_end\")\n</code></pre>"},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer-attributes","title":"Attributes","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer._train_state","title":"<code>_train_state: TrainState = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.callbacks","title":"<code>callbacks: Sequence[Callback] = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.lr","title":"<code>lr: float = 0.001</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.n_epochs","title":"<code>n_epochs: int = 1</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.optimizers","title":"<code>optimizers: optax.GradientTransformation | Sequence[optax.GradientTransformation]</code>  <code>instance-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.rng_key","title":"<code>rng_key: jrand.PRNGKey = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.step_fn","title":"<code>step_fn: StepFn = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.train_state","title":"<code>train_state</code>  <code>property</code>","text":""},{"location":"api/haiku_trainer/trainer/Trainer/#haiku_trainer.trainer.Trainer.transformed","title":"<code>transformed: hk.TransformedWithState | hk.MultiTransformedWithState</code>  <code>instance-attribute</code>","text":""}]}